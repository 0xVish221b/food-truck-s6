from flask import Flask, render_template, request, redirect, session
import bcrypt, os
from models import food_module, user_module
from uuid import uuid4

app = Flask(__name__)

# Use random UUID as a secret key at app startup
app.config['SECRET_KEY'] = str(uuid4()) 
# 'My secret key'


# Utility route to redirect user to about page instead of throwing an error
@app.route('/')
def home():
  return redirect('/about')

@app.route("/about")
def about():
    return render_template("about.html")

@app.route("/menu")
def menu():
    
    # Create a new object for class Food
    food_obj = food_module.Food()

    # Get all food as dictionary and store it in 'res'
    res = food_obj.get_all_food()

    # Use 'res' to render the menu to the user
    return render_template("menu.html", food_items=res)

@app.route("/forms/food/add")
def add_food_form():
  if session.get("user_id", ""):
    return render_template("add_food_form.html")
  else:
    return redirect("/login")
    
@app.route("/api/food/add", methods=["POST"])
def add_food():
    form = request.form

    # No need to set id for Food because it will be auto generated by the database
    new_food = food_module.Food(
      name=form.get("item_name"), 
      image_url=form.get("item_pic"), 
      price=form.get("item_price")
      )
    new_food.insert_food()

    return redirect("/menu")

@app.route("/forms/food/edit/<id>")
def edit_food_form(id):
  if session.get("user_id", ""):
    # Create new food object for class Food
    # Since we just need the id to fetch a food and not other details, 
    # We therefore just initialize the object with the id value
    food_obj=food_module.Food(id=id)
    return render_template("edit_food_form.html", food_item=food_obj.get_food())
  else:
    return redirect("/login")

@app.route("/api/food/edit/<id>", methods=["POST"])
def edit_food(id):
    form = request.form

    # Since we don't care about the existing values and just need the id of the record
    # to be updated, we initialize the object for Food with just the id value
    # name, image and price will be passed into the update_food function and used 
    food_obj = food_module.Food(id=id)
    food_obj.update_food(form.get("item_name"), form.get("item_pic"), form.get("item_price"))

    return redirect("/menu")

@app.route("/forms/food/delete/<id>")
def delete_food_form(id):
  if session.get("user_id", ""):
    food_obj=food_module.Food(id=id)
    return render_template("delete_food_form.html", food_item=food_obj.get_food())
  else:
    return redirect("/login")

@app.route("/api/food/delete", methods=["POST"])
def delete_food():
    
    food_obj=food_module.Food(id=request.form.get("id"))
    food_obj.delete_food()

    return redirect("/menu")

@app.route('/login')
def login_form():
  return render_template("login_form.html")

@app.route('/login', methods=['POST'])
def login_action():
  email = request.form.get('email')
  plain_text_password = request.form.get('password')

  # Create a new user object using password and email
  curr_user = user_module.User(email=email, plain_password=plain_text_password)

  # Validate user and assign the received result back to 'curr_user' variable
  curr_user = curr_user.get_user_if_valid()
  
  if curr_user:
    session["user_id"] = curr_user["id"]
    session["user_name"] = curr_user["name"]
    return redirect('/menu')
  else:
    return render_template("login_error.html")

@app.route("/logout")
def logout():
  session["user_id"] = None
  session["user_name"] = None
  return redirect("/menu")

@app.route("/signup")
def signup():
  return render_template("signup_form.html")

@app.route("/signup", methods=["POST"])
def signup_action():
  # Create a new object for class 'User' 
  # Since we are passing in the name,email and password in the order the User class's constructor expects, 
  # we do not need to explicitly mention which variable is being assigned
  # new_user=user_module.User(name=request.form.get("name"), email=request.form.get("email"), password=request.form.get("password"))
  # is the same as the below code
  new_user=user_module.User(request.form.get("name"), request.form.get("email"), request.form.get("password"))
  new_user.add_user()
  return redirect("/login")

if __name__ == "__main__":
  # Configure Port for app deployment from environment
  app.run(debug=False, port=os.getenv("PORT", default=5000))